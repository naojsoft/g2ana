#! /usr/bin/env python
#
# anaview -- Customized Ginga viewer for the Gen2 analysis servers.
#
import sys
import os

from ginga.rv import main as g_main

from ginga.misc.Bunch import Bunch

import g2ana

def get_plugin_spec(name):
    l_name = name.lower()
    for spec in g_main.plugins:
        if spec.module.lower() == l_name:
            return spec
    return KeyError(name)

def add_plugin_spec(spec):
    g_main.plugins.append(spec)


if __name__ == "__main__":
    # Tweak the sys.path here if you are loading plugins from some
    # area outside your PYTHONPATH
    moduleHome = os.path.split(g2ana.__file__)[0]
    sys.path.insert(0, moduleHome)
    pluginHome = os.path.join(moduleHome, 'plugins')
    sys.path.insert(0, pluginHome)

    # change spec of stock Header plugin to start automatically, and don't
    # show icon in Operations plugin
    spec = get_plugin_spec('header')
    spec.start = True
    spec.optray = False

    # Add Subaru-specific plugins
    for spec in [
        Bunch(module='ANA', ptype='global', hidden=True, optray=False,
              enabled=True, start=True),

        Bunch(module='Ana_UserInput', workspace='dialogs', ptype='local',
              enabled=True, hidden=True),
        Bunch(module='Ana_Confirmation', workspace='dialogs', ptype='local',
              enabled=True, hidden=True),

        Bunch(module='QL_CHARIS', workspace='right', ptype='global',
              start=False, enabled=True, category='Subaru'),
        Bunch(module='QL_IRCS', workspace='in:toplevel', ptype='global',
              start=False, enabled=True, category='Subaru'),
        Bunch(module='QL_MOIRCS', workspace='in:toplevel', ptype='global',
              start=False, enabled=True, category='Subaru'),
        ]:
        add_plugin_spec(spec)

    # construct viewer builder
    viewer = g_main.ReferenceViewer(layout=g_main.default_layout)
    viewer.add_default_plugins(except_local=['TVMark', 'TVMask',
                                             'ChangeHistory'])
    #viewer.add_separately_distributed_plugins()

    # Parse command line options
    from argparse import ArgumentParser

    argprs = ArgumentParser()
    viewer.add_default_options(argprs)

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    if options.display:
        os.environ['DISPLAY'] = options.display

    viewer.main(options, args)
